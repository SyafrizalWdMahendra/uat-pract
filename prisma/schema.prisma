// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String?
  avatar     String?
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  managedProjects Project[]  @relation("ManagedProjects")
  ledTestProjects Project[]  @relation("LedTestProjects")
  feedbacks       Feedback[]
}

model Project {
  id           Int             @id @default(autoincrement())
  manager_id   Int
  test_lead_id Int
  title        String
  description  String?
  priority     ProjectPriority
  status       ProjectStatus
  start_date   DateTime
  due_date     DateTime
  duration     Int?
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt

  manager  User @relation("ManagedProjects", fields: [manager_id], references: [id])
  testLead User @relation("LedTestProjects", fields: [test_lead_id], references: [id])

  features  Feature[]
  feedbacks Feedback[]
}

model Feature {
  id         Int      @id @default(autoincrement())
  project_id Int
  title      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project       Project        @relation(fields: [project_id], references: [id])
  testScenarios TestScenario[]
  feedbacks     Feedback[]
}

model TestScenario {
  id         Int      @id @default(autoincrement())
  feature_id Int?
  code       String?  @unique
  test_case  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  feature   Feature?   @relation(fields: [feature_id], references: [id])
  feedbacks Feedback[]
}

model Feedback {
  id               Int              @id @default(autoincrement())
  user_id          Int
  project_id       Int
  feature_id       Int
  test_scenario_id Int
  description      String?          @db.Text
  priority         FeedbackPriority
  status           FeedbackStatus
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  user         User         @relation(fields: [user_id], references: [id])
  testScenario TestScenario @relation(fields: [test_scenario_id], references: [id])
  feature      Feature      @relation(fields: [feature_id], references: [id])
  project      Project      @relation(fields: [project_id], references: [id])
}

enum Role {
  admin
  test_lead
  manager
}

enum ProjectPriority {
  low
  medium
  high
  critical
}

enum ProjectStatus {
  active
  inactive
  completed
}

enum TestScenarioStatus {
  not_started
  in_progress
  passed
  failed
  blocked
}

enum TestScenarioType {
  general
  global
  feature
}

enum FeedbackPriority {
  low
  medium
  high
}

enum FeedbackStatus {
  open
  in_progress
  resolved
  closed
}
