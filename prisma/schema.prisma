// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model FeatureManagement {
//   id          Int      @id @default(autoincrement())  // ID dengan auto increment
//   number_info  String     // Kolom dengan nama snake_case
//   text        String  // Kolom opsional
//   image       String   // Status fitur
//   background      String   // Status fitur
//   image_position      String   // Status fitur
//   createdAt   DateTime @default(now()) @map("created_at")  // Tanggal pembuatan otomatis
//   updatedAt   DateTime @updatedAt   @map("updated_at")      // Tanggal pembaruan otomatis
//   deleted_at  DateTime?

//   @@map("feature_management")
// }


model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  role              Role
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  projects          Project[]
  feedbacks         Feedback[]
  feedbackHistories FeedbackHistory[]
}

model Project {
  id                Int                @id @default(autoincrement())
  user_id           Int
  title             String
  description       String?
  priority          ProjectPriority
  status            ProjectStatus
  start_date        DateTime
  due_date          DateTime
  duration          Int?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  user              User               @relation(fields: [user_id], references: [id])
  features          Feature[]
  feedbackHistories FeedbackHistory[]
}

model Feature {
  id           Int            @id @default(autoincrement())
  project_id   Int
  title        String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt

  project      Project        @relation(fields: [project_id], references: [id])
  testScenarios TestScenario[]
}

model TestScenario {
  id             Int                @id @default(autoincrement())
  feature_id     Int?
  code           String?             @unique
  title          String
  description    String?
  expected_result String?
  actual_result  String?
  status         TestScenarioStatus
  type           TestScenarioType
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt

  feature        Feature?           @relation(fields: [feature_id], references: [id])
  feedbacks      Feedback[]
}

model Feedback {
  id              Int              @id @default(autoincrement())
  user_id         Int
  test_scenario_id Int
  description     String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  user            User             @relation(fields: [user_id], references: [id])
  testScenario    TestScenario     @relation(fields: [test_scenario_id], references: [id])
  histories       FeedbackHistory[]
}

model FeedbackHistory {
  id          Int                  @id @default(autoincrement())
  feedback_id Int
  user_id     Int
  project_id  Int
  status      FeedbackHistoryStatus
  notes       String?
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt

  feedback    Feedback             @relation(fields: [feedback_id], references: [id])
  user        User                 @relation(fields: [user_id], references: [id])
  project     Project              @relation(fields: [project_id], references: [id])
}

enum Role {
  admin
  tes_lead
  manager
}

enum ProjectPriority {
  low
  medium
  high
  critical
}

enum ProjectStatus {
  active
  inactive
  completed
}

enum TestScenarioStatus {
  not_started
  in_progress
  passed
  failed
  blocked
}

enum TestScenarioType {
  general
  global
  feature
}

enum FeedbackHistoryStatus {
  open
  in_progress
  resolved
  closed
}